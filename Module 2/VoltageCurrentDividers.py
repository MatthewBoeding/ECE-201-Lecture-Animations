from manim import *
from manim_circuit import *
from manim_slides import Slide

class VoltageCurrentDividers(Slide):
    def construct(self):
        voltdivCircuit = Circuit()
        title = Tex(r"Voltage Divider").to_edge(UP)
        self.add(title)
        vo = VoltageSource("", dependent = False)
        r1 = Resistor("x").rotate(DEGREES*-90).shift(RIGHT*2+UP*1)
        r2 = Resistor("x").rotate(DEGREES*-90).shift(RIGHT*2 + DOWN*1)
        r1.remove(r1.label)
        r2.remove(r2.label)
        r1lab = Tex(r"$R_1$").next_to(r1, RIGHT, buff=.2)
        r2lab = Tex(r"$R_2$").next_to(r2, RIGHT, buff=.2)
        voltdivCircuit.add(vo,r1,r2,r1lab,r2lab)
        voltdivCircuit.add_wire(vo.get_terminals("positive"), r1.get_terminals("left"))
        voltdivCircuit.add_wire(r1.get_terminals("right"), r2.get_terminals("left"))
        voltdivCircuit.add_wire(r2.get_terminals("right"), vo.get_terminals("negative"), invert = True)
        voltdivCircuit.to_edge(RIGHT) 
        self.play(Create(voltdivCircuit))

        self.next_slide()
        e1 = Tex(r"We know $I_{R_1} = I_{R_2}$ from KCL").scale(.8).next_to(title, DOWN, buff=.2).to_edge(LEFT)
        e2 = Tex(r"Also: $R_{eq} = R_1+R_2$").scale(.8).next_to(e1, DOWN, buff=.2).to_edge(LEFT)
        e3 = Tex(r"So: $V_{R_2} = V_s - V_{R_1} = V_s - R_1 I$").scale(.8).next_to(e2, DOWN, buff=.2).to_edge(LEFT)
        e4 = Tex(r"$I = \frac{V_s}{R_1 + R_2}$").scale(.8).next_to(e3, DOWN, buff=.2).to_edge(LEFT)
        e5 = Tex(r"$V_{R_2} = \frac{V_s (R_1 + R_2)}{R_1 + R_2} - \frac{V_s R_1}{R_1 + R_2}$").scale(.8).next_to(e4, DOWN, buff=.2).to_edge(LEFT)
        e6 = Tex(r"$V_{R_2} = \frac{V_s R_2}{R_1 + R_2}$").scale(.8).next_to(e5, DOWN, buff=.2).to_edge(LEFT)
        self.play(Write(e1))
        self.wait()
        self.play(Write(e2))
        self.wait()
        self.play(Write(e3))
        self.wait()
        self.play(Write(e4))
        self.wait()
        self.play(Write(e5))
        self.wait()
        self.play(Write(e6))
        self.wait()
        self.next_slide()

        self.play(*[FadeOut(mob) for mob in self.mobjects])
        title = Tex(r"Current Divider").to_edge(UP)
        self.play(Write(title))
        circ = Circuit()
        io = CurrentSource("", dependent = False)
        r1 = Resistor("x").rotate(DEGREES*-90).shift(RIGHT*1.5)
        r2 = Resistor("y").rotate(DEGREES*-90).shift(RIGHT*3)
        r1.remove(r1.label)
        r2.remove(r2.label)
        r1lab = Tex(r"$R_1$").next_to(r1, RIGHT, buff=.2)
        r2lab = Tex(r"$R_2$").next_to(r2, RIGHT, buff=.2)
        circ.add(io,r1,r2, r1lab, r2lab).to_edge(RIGHT)
        circ.add_wire(io.get_terminals("positive"), io.get_terminals("positive")+[0,.5,0])
        circ.add_wire(r1.get_terminals("left"), (r1.get_terminals("left"))*[1,0,1]+(io.get_terminals("positive")+[0,.5,0])*[0,1,0])
        circ.add_wire(r2.get_terminals("left"), (r2.get_terminals("left"))*[1,0,1]+(io.get_terminals("positive")+[0,.5,0])*[0,1,0])
        circ.add_wire(io.get_terminals("positive")+[0,.5,0], (r2.get_terminals("left"))*[1,0,1]+(io.get_terminals("positive")+[0,.5,0])*[0,1,0])

        circ.add_wire(io.get_terminals("negative"), io.get_terminals("negative")+[0,-.5,0])
        circ.add_wire(r1.get_terminals("right"), (r1.get_terminals("right"))*[1,0,1]+(io.get_terminals("negative")+[0,-.5,0])*[0,1,0])
        circ.add_wire(r2.get_terminals("right"), (r2.get_terminals("right"))*[1,0,1]+(io.get_terminals("negative")+[0,-.5,0])*[0,1,0])
        circ.add_wire(io.get_terminals("negative")+[0,.5,0], (r2.get_terminals("right"))*[1,0,1]+(io.get_terminals("negative")+[0,-.5,0])*[0,1,0])
        self.play(Create(circ))

        self.next_slide()
        c1 = Tex(r"$I_s = \frac{V}{R_1} + \frac{V}{R_2} = V(\frac{1}{R_1}+\frac{1}{R_2})$").scale(.8).next_to(title, DOWN, buff=.2).to_edge(LEFT)
        c2 = Tex(r"$V = I_s(\frac{1}{R_1}+\frac{1}{R_2})^{-1} = I_s\frac{R_1 R_2}{R_1+R_2}$").scale(.8).next_to(c1, DOWN, buff=.2).to_edge(LEFT)
        c3 = Tex(r"$I_{R_2} = \frac{V}{R_2} = I_s(\frac{\frac{1}{R_2}}{\frac{1}{R_1}+\frac{1}{R_2}})$").scale(.8).next_to(c2, DOWN, buff=.2).to_edge(LEFT)
        c4 = Tex(r"$I_{R_2} = I_s\frac{R_1}{R_1+R_2}$").scale(.8).next_to(c3, DOWN, buff=.2).to_edge(LEFT)
        self.play(Write(c1))
        self.wait()
        self.play(Write(c2))
        self.wait()
        self.play(Write(c3))
        self.wait()
        self.play(Write(c4))
        self.wait()

