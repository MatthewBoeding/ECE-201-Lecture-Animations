from manim import *
from manim_circuit import *
from manim_slides import Slide

class OpAmpIntro(Slide):
    def construct(self):
        title = Tex("Operational Amplifier Introduction").to_edge(UP)
        self.add(title)
        triangle = Triangle(color=WHITE).scale(1.5)
        ri = Resistor().scale(.5).shift(LEFT*.5)
        ri.remove(ri.label)
        leads = triangle.get_bottom()*[0,1,1]
        noninv = Line(leads+(ri.get_terminals("left")*[1,0,0]), leads+(ri.get_terminals("left")*[1,0,0])+[0,-.5,0])
        inv = Line(leads+(ri.get_terminals("right")*[1,0,0]), leads+(ri.get_terminals("right")*[1,0,0])+[0,-.5,0])
        opamp = VGroup().add(triangle, noninv, inv)
        opamp.rotate(DEGREES*-90)
        vout = Tex("$V_o$").scale(.5).move_to(triangle.get_right()+[.15,0,0])
        ri.rotate(-90*DEGREES).shift(LEFT*.25)
        noninv.shift(DOWN * (abs(noninv.get_center()-ri.get_terminals("left")))[1])
        noninvlabel = Tex(r'$+$').scale(.5).next_to(noninv, UP, buff=.2)
        inv.shift(DOWN * (abs(inv.get_center()-ri.get_terminals("right")))[1])
        invlabel = Tex(r'$-$').scale(.5).next_to(inv, DOWN, buff=.2)
        opamp.add(noninvlabel, invlabel, vout)
        self.play(Create(opamp))


        self.next_slide()

        self.play(opamp.animate.scale(2))
        rilab = Tex("$R_i$").scale(.5).next_to(ri, RIGHT, buff=.2)
        riLeadLeft = Line(ri.get_terminals("left"), ri.get_terminals("left")*[1,0,1]+noninv.get_center()*[0,1,0])
        riLL2 = Line(noninv.get_center(), ri.get_terminals("left")*[1,0,1]+noninv.get_center()*[0,1,0])
        riLeadRight = Line(ri.get_terminals("right"), ri.get_terminals("right")*[1,0,1]+inv.get_center()*[0,1,0])
        riLR2  = Line(inv.get_center(), ri.get_terminals("right")*[1,0,1]+inv.get_center()*[0,1,0])
        vo = VoltageSource("", dependent=True).scale(.5).shift(RIGHT*.25)
        vo.shift((vo.get_terminals("positive")-triangle.get_right())*[0,-1,0])
        vo.remove(vo.label)
        volab = Tex("$A(v_p-v_n)$").scale(.5).next_to(vo, RIGHT, buff=.2).shift(LEFT*.1+DOWN*.1)
        gnd = Ground().scale(.6).move_to(vo.get_terminals("negative")).shift(DOWN*.25)
        lgnd = Line(gnd.get_terminals(), vo.get_terminals("negative"))
        ro = Resistor().scale(.5).move_to(vo.get_terminals("positive")).shift(RIGHT*.5)
        ro.remove(ro.label)
        rolab = Tex("$R_o$").scale(.5).next_to(ro, UP, buff=.2)
        lout = Line(ro.get_terminals("right"), triangle.get_right())
        lout2 = Line(vo.get_terminals("positive"), ro.get_terminals("left")+[.01,0,0])
        linearModel = VGroup().add(ri, rilab, riLeadLeft, riLeadRight, vo, volab, ro, rolab, lout, lout2, riLL2, riLR2, gnd, lgnd)
        self.play(Create(linearModel))

        self.next_slide()
        vs = VoltageSource(dependent=False).scale(.75)
        vs.remove(vs.label)
  
        vs.move_to(inv.get_center()+[-1.5,.75,0])
        vslab = Tex(r"$V_s$").scale(.6).next_to(vs, LEFT, buff=.2)
        rs = Resistor().scale(.5).move_to(noninv.get_center()).shift(LEFT*.75)
        rslab = Tex(r"$R_s$").scale(.6).next_to(rs, UP, buff=.2)
        rl = Resistor().scale(.4).rotate(-90*DEGREES)
        rl.shift(lout.get_end()-rl.get_terminals('left'))
        rllab = Tex(r"$R_L$").scale(.5).next_to(rl, RIGHT, buff=.2)
        circuit = Circuit().add(vs, rslab)
        circuit.add_wire(vs.get_terminals("positive"), rs.get_terminals("left"))
        circuit.add_wire(rs.get_terminals("right"), noninv.get_center())
        circuit.add_wire(vs.get_terminals("negative"), inv.get_center())
        circuit.add(vslab, rs)
        self.play(Create(circuit))

        self.next_slide()

        circuit.add_wire(ri.get_terminals("right"), gnd.get_terminals())
        self.play(FadeOut(triangle), FadeOut(noninvlabel), FadeOut(invlabel), FadeOut(vout))
        self.play(Create(rl), Create(rllab))
        lint = Line(gnd.get_terminals(), rl.get_terminals("right")*[1,0,1]+gnd.get_terminals()*[0,1,0])
        lint2 = Line(rl.get_terminals("right")*[1,0,1]+gnd.get_terminals()*[0,1,0], rl.get_terminals("right"))
        self.play(FadeIn(lint), FadeIn(lint2))

        self.next_slide()

        allcirc = VGroup().add(mob for mob in self.mobjects)
        self.play(allcirc.animate.to_edge(LEFT))
        self.play(Transform(volab, Tex(r"$AV_{R_i}$").scale(.6).move_to(volab.get_center())))
        vieq = Tex(r"$V_{R_i} = \frac{R_i}{R_i+R_s}V_s$").scale(.75).next_to(title, DOWN, buff=.2).to_edge(RIGHT)
        voeq = Tex(r"$V_{R_L} = AV_{R_i}\frac{R_L}{R_L+R_o}$").scale(.75).next_to(vieq, DOWN, buff=.2).to_edge(RIGHT)
        voeq2 = Tex(r"$V_{R_L} = A \frac{R_i}{R_i+R_s}V_s\frac{R_L}{R_L+R_o}$").scale(.75).next_to(voeq, DOWN, buff=.2).to_edge(RIGHT)
        self.play(Write(vieq))
        self.wait()
        self.play(Write(voeq))
        self.wait()
        self.play(Write(voeq2))
        self.wait()
        self.next_slide()
        consider = Tex("Consider $R_i >> R_s$ and $R_o << R_L$:").scale(.75).next_to(voeq2, DOWN, buff=.2).to_edge(RIGHT)
        then = Tex("$V_{R_L} = A(1)V_s(1) = AV_s$").scale(.75).next_to(consider, DOWN, buff=.2).to_edge(RIGHT)
        self.play(Write(consider))
        self.wait()
        self.play(Write(then))
        self.wait()

        self.next_slide()

        self.play(Transform(vieq, Tex(r"$V_{R_L} = AV_s$").scale(.75).move_to(vieq)))
        gone = [voeq, voeq2, consider, then]
        self.play(*[FadeOut(mob) for mob in gone])
        ass = Tex(r"Assumptions:").next_to(vieq, DOWN, buff=.2).to_edge(RIGHT)
        ass1 = Tex(r"$R_i \rightarrow \infty$").scale(.75).next_to(ass, DOWN, buff=.2).to_edge(RIGHT)
        ass2 = Tex(r"$A \rightarrow \infty $").scale(.75).next_to(ass1, DOWN, buff=.2).to_edge(RIGHT)
        ass3 = Tex(r"$R_o \rightarrow 0$").scale(.75).next_to(ass2, DOWN, buff=.2).to_edge(RIGHT)
        conseq = Tex(r"Consequences:").next_to(ass3, DOWN, buff=.2).to_edge(RIGHT)
        conseq1 = Tex(r"$i_+ = i_- = 0 $").scale(.75).next_to(conseq, DOWN, buff=.2).to_edge(RIGHT)
        conseq2 = Tex(r"$v_+ - v_- = 0  $").scale(.75).next_to(conseq1, DOWN, buff=.2).to_edge(RIGHT)
        self.play(Write(ass), Write(ass1), Write(ass2), Write(ass3), Write(conseq), Write(conseq1), Write(conseq2))

        self.next_slide()

        title = Tex(r"Inverting Configuration").to_edge(UP)
        
        self.play(*[FadeOut(mob) for mob in self.mobjects])
        self.play(Write(title))
        opamp.remove(inv, noninv)
        opamp.scale(.5)
        vout.shift(UP*.5+RIGHT*.5)
        newinvlabel = Tex(r"$+$").scale(.5).move_to(invlabel.get_center()+[.5,0,0])
        newnoninvlabel = Tex(r"$-$").scale(.5).move_to(noninvlabel.get_center()+[.5,0,0])

        self.play(Create(opamp), Transform(invlabel, newinvlabel), Transform(noninvlabel, newnoninvlabel))
        noninvleadloc = triangle.get_left()*[1,0,1] + noninvlabel.get_center()*[0,1,0]
        invleadloc = triangle.get_left()*[1,0,1] + invlabel.get_center()*[0,1,0]
        noninvgnd = Ground().next_to(noninvleadloc,LEFT,buff=.1).shift([-1,-2,0])
        invgnd = Ground().next_to(invleadloc,LEFT,buff=.1).shift([-2.5,-1.5,0])
        vs = VoltageSource("", dependent=False).move_to(invgnd.get_terminals()+[0,1,0])
        vs.shift([-1,0,0] *(vs.get_terminals("negative")-invgnd.get_terminals()))
        vs.remove(vs.label)
        vslab.next_to(vs, LEFT, buff=.1)

        r1 = Resistor().scale(.75).next_to(vs, UP, buff=.5)
        r1.move_to(noninvleadloc + [-1.5,0,0])
        r1lab = Tex(r"$R_1$").scale(.75).next_to(r1,UP,buff=.2)
        
        r2 = Resistor().scale(.75).next_to(triangle, UP, buff=.5)
        r2lab = Tex(r"$R_2$").scale(.75).next_to(r2,UP,buff=.2)
        invcirc = Circuit().add(invgnd, vs, noninvgnd, vslab, r1, r2, r1lab, r2lab)
        invcirc.add_wire(vs.get_terminals("negative"), invgnd.get_terminals())
        invcirc.add_wire(vs.get_terminals("positive"), r1.get_terminals("left"))
        invcirc.add_wire(r1.get_terminals("right"), noninvleadloc)
        invcirc.add_wire(r1.get_terminals("right"), r2.get_terminals("left"))
        invcirc.add_wire(r2.get_terminals("right"), triangle.get_right()+[.5,0,0], invert = True)
        invcirc.add_wire(triangle.get_right(), triangle.get_right()+[.5,0,0])
        invcirc.add_wire(noninvgnd.get_terminals(), invleadloc)
        self.play(Create(invcirc))

        self.next_slide()
        iinv = Tex(r"$i_-=0$").scale(.6).move_to(noninvleadloc-[.5,.25,0])
        vnoninv = Tex(r"$v_+ = 0$").scale(.6).move_to(invleadloc-[.5,.25,0])
        self.play(Write(vnoninv), Write(iinv))

        kcl = Tex(r"$\frac{V_s-v_-}{R_1} + \frac{V_o-v_-}{R_2} = i_-$").scale(.75).next_to(title, DOWN, buff=.2).to_edge(RIGHT)
        kcl2 = Tex(r"$\frac{V_s}{R_1} + \frac{V_o}{R_2}$").scale(.75).next_to(kcl, DOWN, buff=.2).to_edge(RIGHT)
        kcl3 = Tex(r"Gain = $\frac{V_o}{V_s} = -\frac{R_2}{R_1}$").scale(.75).next_to(kcl2, DOWN, buff=.2).to_edge(RIGHT)
        self.play(Write(kcl))
        self.play(Write(kcl2))
        self.play(Write(kcl3))
        self.next_slide()