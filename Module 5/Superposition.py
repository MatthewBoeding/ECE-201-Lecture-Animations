from manim import *
from manim_circuit import *
from manim_slides import Slide


class Superposition(Slide):
    def construct(self):
        circuit = Circuit()
        vo = VoltageSource("6", dependent = False)
        r1 = Resistor("6k").shift(UP*1.5+RIGHT*1.25)
        r2 = Resistor("2k", RIGHT).rotate(DEGREES*-90).shift(RIGHT*2.5)
        r3 = Resistor("3k").shift(UP*1.5+RIGHT*3.75)
        io = CurrentSource("2m", dependent = False).shift(RIGHT*5)
        r4 = Resistor("3k", RIGHT).rotate(DEGREES*-90).shift(RIGHT*6.25)
        circuit.add(vo, r1,r2,r3,io,r4)
        circuit.to_edge(RIGHT)
        
        circuit.add_wire(vo.get_terminals("positive"), r1.get_terminals("left"))
        circuit.add_wire(r1.get_terminals("right"), r3.get_terminals("left"))
        circuit.add_wire(r3.get_terminals("right"), r4.get_terminals("left"), invert=True)
        circuit.add_wire(r2.get_terminals("left"), r3.get_terminals("left"))
        circuit.add_wire(io.get_terminals("positive"), r3.get_terminals("right"))

        offset = (vo.get_terminals("negative")+[0,-.5,0]) * [0,1,0]
        circuit.add_wire(vo.get_terminals("negative"), vo.get_terminals("negative")+[0,-.5,0])
        circuit.add_wire(r2.get_terminals("right"), (r2.get_terminals("right")*[1,0,1])+offset)
        circuit.add_wire(r4.get_terminals("right"), (r4.get_terminals("right")*[1,0,1])+offset)
        circuit.add_wire(io.get_terminals("negative"), (io.get_terminals("negative")*[1,0,1])+offset)
        circuit.add_wire(vo.get_terminals("negative")+[0,-.5,0],(r4.get_terminals("right")*[1,0,1])+offset)
        self.play(Create(circuit))
        title = Tex(r"Superposition").to_edge(UP)
        self.play(Write(title))
        self.next_slide()
        text = Tex(r"Based off Linearity of Elements").scale(.75).next_to(title, DOWN, buff=.2).to_edge(LEFT)
        text2 = Tex(r"We can find values by summing\\contribution of each source.").scale(.75).next_to(text, DOWN, buff=.2).to_edge(LEFT)
        text3 = Tex(r"Turn off Independent Sources\\Voltage Sources = Short\\Current Sources = Open").scale(.75).next_to(text2, DOWN, buff=.2).to_edge(LEFT)
        self.play(Write(text), Write(text2), Write(text3))
        self.next_slide()
        I2k = Arrow(start = r2.get_terminals("left"),end = r2.get_terminals("right")).scale(.5).shift(LEFT*.4)
        I2klab = Tex(r"$I_{2k}$").scale(.5).next_to(I2k, LEFT, buff=.2)
        self.play(FadeIn(I2k), FadeIn(I2klab))
        text4 = Tex(r"In this example:\\$I_{2k} = I_{2k \vert V_s = 0} + I_{2k \vert I_s = 0}$").scale(.6).next_to(text3, DOWN, buff=.2).to_edge(LEFT)
        self.play(Write(text4))
        self.next_slide()
        self.play(FadeOut(text2), FadeOut(text3), FadeOut(text4))
        text4.move_to(text.get_center())
        self.play(Transform(text, Tex(r"$I_{2k} = I_{2k \vert V_s = 0} + I_{2k \vert I_s = 0}$").move_to(text.get_center())))
        is_off = Tex(r"$I_{2k \vert I_s = 0}$").scale(.8).next_to(text, DOWN, buff=.2)
        self.play(Write(is_off))
        self.play(FadeOut(io))
        self.next_slide()

        part1_1 = Tex(r"$2k \vert \vert (3k+3k) = \frac{3}{2}k\Omega$\\$V_{2k} = \frac{6V\frac{3}{2}k\Omega}{6k+\frac{3}{2}k\Omega} = \frac{6}{5}V$").scale(.75).next_to(is_off, DOWN, buff=.2)
        part1_2 = Tex(r"$I_{2k\vert I_s = 0} = \frac{V_{2k}}{2k\Omega} = \frac{3}{5}mA$").scale(.75).next_to(part1_1, DOWN, buff=.2)
        self.play(Write(part1_1))
        self.wait()
        self.play(Write(part1_2))
        self.wait()
        self.next_slide()
        self.play(Transform(is_off, Tex(r"$I_{2k \vert I_s = 0}=\frac{3}{5}mA$").scale(.8).move_to(is_off.get_center())), FadeOut(part1_1), FadeOut(part1_2))
        part2 = Tex(r"$I_{2k \vert V_s = 0}$").scale(.8).next_to(is_off, DOWN, buff=.2)
        self.play(Write(part2))
        short = Line(vo.get_terminals("positive"), vo.get_terminals("negative"))
        self.play(FadeIn(io), FadeOut(vo), FadeIn(short))

        I1 = Arrow(start = r3.get_terminals("right"),end = r3.get_terminals("left")).scale(.5).shift(UP*.4)
        I1lab = Tex(r"$I_{1}$").scale(.5).next_to(I1, UP, buff=.2)
        self.play(FadeIn(I1), FadeIn(I1lab))
        part2_1 = Tex(r"$6k \vert \vert 2k = \frac{3}{2}k\Omega$").scale(.8).next_to(part2, DOWN, buff=.2)
        part2_2 = Tex(r"$I_1 = \frac{2mA(3k)}{3k + (3k + \frac{3}{2}k)} = \frac{4}{5}mA$").scale(.8).next_to(part2_1, DOWN, buff=.2)
        part2_3 = Tex(r"$I_{2k \vert V_s = 0} = I_1 \frac{6k}{6k+2k} = \frac{3}{5}mA$").scale(.8).next_to(part2_2, DOWN, buff=.2)
        self.play(Write(part2_1))
        self.wait()
        self.play(Write(part2_2))
        self.wait()
        self.play(Write(part2_3))
        self.wait()
        self.next_slide()
        self.play(Transform(part2, Tex(r"$I_{2k \vert V_s = 0}=\frac{3}{5}mA$").scale(.8).move_to(part2.get_center())), FadeOut(part2_1), FadeOut(part2_2),FadeOut(part2_3))
        self.play(FadeIn(vo), FadeOut(short))
        self.play(FadeIn(Tex(r"$I_{2k} = \frac{3}{5} + \frac{3}{5} mA = \frac{6}{5}mA$").scale(.8).next_to(part2, DOWN, buff=.2)))